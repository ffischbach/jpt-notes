import os
import subprocess
import pyfiglet
from colorama import Fore, Back, Style, init
import time

# Initialize Colorama
init(autoreset=True)

# Globale Variablen
found_hosts = []
hidden_hosts = []
scanned_network = None

def display_banner():
    banner = pyfiglet.figlet_format("carpenoctem")
    banner2 = pyfiglet.figlet_format("x")
    banner3 = pyfiglet.figlet_format("ffischbach")
    print(Fore.RED + Style.BRIGHT + banner)
    print(Fore.RED + Style.BRIGHT + banner2)
    print(Fore.RED + Style.BRIGHT + banner3)
    print(Fore.YELLOW + Back.BLUE + Style.BRIGHT + " Willkommen zu deinem Penetration Testing Toolkit ".center(80, " "))
    print(Fore.YELLOW + "=" * 80)

def section_title(title):
    print("\n" + Fore.MAGENTA + Style.BRIGHT + "=" * 80)
    print(Fore.CYAN + f"{title}".center(80))
    print(Fore.MAGENTA + "=" * 80)

# Hilfsfunktionen
def save_scan_results(directory, filename, content):
    create_directory(directory)
    file_path = os.path.join(directory, filename)
    with open(file_path, "w") as file:
        file.write(content)
    print(Fore.CYAN + f"[+] Ergebnisse gespeichert in: {file_path}")
    return file_path

def create_directory(directory):
    os.makedirs(directory, exist_ok=True)

def run_nmap_command(command):
    print(Fore.GREEN + f"[+] Starte Befehl: {command}")
    result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, text=True)
    return result.stdout

def validate_previous_scan(scanned_network):
    if not scanned_network:
        print(Fore.RED + "[-] Kein vorheriger Scan durchgeführt.")
        return None
    directory = f"scan_results_{scanned_network.replace('/', '_')}"
    if not os.path.exists(directory):
        print(Fore.RED + f"[-] Verzeichnis '{directory}' existiert nicht.")
        return None
    return directory

def add_oA_output(command, directory, filename_base):
    file_path = os.path.join(directory, filename_base)
    return f"{command} -oA {file_path}"

# Ende von Hilfsfunktionen

def nmap_full_network_scan():
    global found_hosts, scanned_network
    section_title("Nmap Full Network Scan")
    scanned_network = input(Fore.CYAN + "Geben Sie das Netzwerk für den Scan ein (z.B. 172.23.255.0/24): ").strip()
    
    directory = f"scan_results_{scanned_network.replace('/', '_')}"
    create_directory(directory)

    command = f"nmap -sn {scanned_network}"
    command_with_output = add_oA_output(command, directory, "network_scan")
    
    output = run_nmap_command(command)
    
    found_hosts = [line.split("for")[1].strip() for line in output.splitlines() if "Nmap scan report for" in line]
    if found_hosts:
        print(Fore.GREEN + "[+] Gefundene aktive Hosts:")
        for i, host in enumerate(found_hosts, start=1):
            print(Fore.YELLOW + f"  {i}. {host}")
        save_scan_results(f"scan_results_{scanned_network.replace('/', '_')}", "reachable-hosts.txt", "\n".join(found_hosts))
    else:
        print(Fore.RED + "[-] Keine aktiven Hosts gefunden.")

def nmap_scan_all_found_hosts():
    global found_hosts, scanned_network
    section_title("Nmap Scan aller gefundenen Hosts")
    directory = validate_previous_scan(scanned_network)
    if not directory or not found_hosts:
        print(Fore.YELLOW + "Bitte führen Sie zuerst einen Full Network Scan durch.")
        return

    for host in found_hosts:
        host_directory = os.path.join(directory, host.replace(":", "_"))
        create_directory(host_directory)
        
        command = f"nmap -sV -sC {host}"
        command_with_output = add_oA_output(command, host_directory, "host_scan")
        
        output = run_nmap_command(command_with_output)
        save_scan_results(host_directory, "scan_results.txt", output)

def nmap_deep_scan_all_found_hosts():
    global found_hosts, scanned_network
    section_title("Nmap Deep Scan aller gefundenen Hosts")
    directory = validate_previous_scan(scanned_network)
    if not directory or not found_hosts:
        print(Fore.YELLOW + "Bitte führen Sie zuerst einen Full Network Scan durch.")
        return

    for host in found_hosts:
        host_directory = os.path.join(directory, host.replace(":", "_"))
        create_directory(host_directory)
        
        command = f"nmap -p- -sV -sC {host}"
        command_with_output = add_oA_output(command, host_directory, "deep_host_scan")
        
        output = run_nmap_command(command_with_output)
        save_scan_results(host_directory, "scan_results.txt", output)

def nmap_single_client_scan():
    global found_hosts, scanned_network
    section_title("Nmap Single Client Scan")
    choice = input(Fore.CYAN + "Wählen Sie einen Host aus den gefundenen Hosts? (j/n): ").strip().lower()
    if choice == "j" and found_hosts:
        for i, host in enumerate(found_hosts, start=1):
            print(Fore.YELLOW + f"  {i}. {host}")
        try:
            ip_address = found_hosts[int(input(Fore.CYAN + "Wählen Sie einen Host (Nummer eingeben): ")) - 1]
        except (ValueError, IndexError):
            print(Fore.RED + "[-] Ungültige Auswahl.")
            return
    else:
        ip_address = input(Fore.CYAN + "Geben Sie die IP-Adresse des Hosts ein: ").strip()
    
    directory = validate_previous_scan(scanned_network)
    if not directory:
        return
    
    host_directory = os.path.join(directory, ip_address.replace(":", "_"))
    create_directory(host_directory)
    
    command = f"nmap -sV -sC -p- {ip_address}"
    command_with_output = add_oA_output(command, host_directory, "single_client_scan")
    
    output = run_nmap_command(command_with_output)
    save_scan_results(host_directory, "single_client_scan_results.txt", output)

def nmap_udp_ports_scan_on_hidden_hosts():
    global hidden_hosts, scanned_network
    section_title("Nmap UDP Ports Scan auf versteckten Hosts")
    
    directory = validate_previous_scan(scanned_network)
    if not directory:
        return

    if hidden_hosts:
        print(Fore.GREEN + "\nGefundene versteckte Hosts:")
        for i, host in enumerate(hidden_hosts, start=1):
            print(Fore.YELLOW + f"  {i}. {host}")
        choice = input(Fore.CYAN + "\nWählen Sie einen Host (Nummer eingeben) oder drücken Sie Enter für alle: ").strip()
        
        if choice.isdigit() and 1 <= int(choice) <= len(hidden_hosts):
            ip_addresses = [hidden_hosts[int(choice) - 1]]
        else:
            ip_addresses = hidden_hosts
    else:
        ip_address = input(Fore.CYAN + "Geben Sie die IP-Adresse des Hosts ein: ").strip()
        if not ip_address:
            print(Fore.RED + "\n[-] Keine gültige Eingabe. Bitte erneut versuchen.")
            return
        ip_addresses = [ip_address]

    for ip_address in ip_addresses:
        host_directory = os.path.join(directory, ip_address.replace(":", "_"))
        create_directory(host_directory)
        
        command = f"nmap -Pn -sU -p 53,161 {ip_address}"
        command_with_output = add_oA_output(command, host_directory, "udp_ports_scan")
        
        output = run_nmap_command(command_with_output)
        save_scan_results(host_directory, "udp_ports_scan_results.txt", output)

    print(Fore.CYAN + "\n[+] UDP-Port-Scans abgeschlossen.")


def nmap_hidden_hosts_scan():
    global found_hosts, scanned_network, hidden_hosts
    section_title("Nmap Hidden Hosts Scan")
    
    directory = validate_previous_scan(scanned_network)
    if not directory:
        return
    
    command = f"nmap -Pn {scanned_network}"
    start_time = time.time()
    hidden_hosts = []

    with subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True) as process:
        current_host = None
        for line in process.stdout:
            if "Nmap scan report for" in line:
                current_host = line.split("for")[1].strip()
            if current_host and "open" in line and current_host not in found_hosts and current_host not in hidden_hosts:
                hidden_hosts.append(current_host)
                print(Fore.GREEN + f"[+] Neuer Host entdeckt: {current_host}")
                current_host = None
            if time.time() - start_time > 300:
                process.terminate()
                print(Fore.RED + "[!] Timeout erreicht.")
                break
    
    result_content = "\n".join(hidden_hosts) if hidden_hosts else "Keine neuen Hosts gefunden."
    save_scan_results(directory, "hidden_hosts_scan_results.txt", result_content)


def delete_all_scan_results():
    section_title("Löschen aller Scan-Ergebnisse")
    
    scan_result_dirs = [d for d in os.listdir() if os.path.isdir(d) and d.startswith("scan_results_")]
    
    if not scan_result_dirs:
        print(Fore.RED + "\n[-] Keine Scan-Ergebnisse gefunden, die gelöscht werden könnten.")
        return

    print(Fore.YELLOW + "[!] Die folgenden Verzeichnisse und ihre Inhalte werden gelöscht:")
    for directory in scan_result_dirs:
        print(Fore.CYAN + f"  - {directory}")
    
    confirm = input(Fore.RED + "\nSind Sie sicher, dass Sie alle Scan-Ergebnisse löschen möchten? (j/n): ").strip().lower()
    if confirm != "j":
        print(Fore.GREEN + "\n[+] Löschvorgang abgebrochen.")
        return

    for directory in scan_result_dirs:
        try:
            for root, dirs, files in os.walk(directory, topdown=False):
                for file in files:
                    os.remove(os.path.join(root, file))
                for dir in dirs:
                    os.rmdir(os.path.join(root, dir))
            os.rmdir(directory)
            print(Fore.GREEN + f"[+] Verzeichnis '{directory}' erfolgreich gelöscht.")
        except Exception as e:
            print(Fore.RED + f"[-] Fehler beim Löschen von '{directory}': {e}")

    print(Fore.CYAN + "\n[+] Alle Scan-Ergebnisse wurden gelöscht.")

def main_menu():
    while True:
        section_title("Hauptmenü")
        print(Fore.BLUE + "1. Nmap Full Network Scan")
        print(Fore.CYAN + "   Parameter: -sn (Ping-Scan zur Identifikation aktiver Hosts)")
        print(Fore.BLUE + "2. Nmap Scan aller gefundenen Hosts")
        print(Fore.CYAN + "   Parameter: -sV -sC (Versionserkennung, Skripte)")
        print(Fore.BLUE + "3. Nmap deep Scan (alle ports) aller gefundenen Hosts")
        print(Fore.CYAN + "   Parameter: -p- -sV -sC (Versionserkennung, Skripte)")
        print(Fore.BLUE + "4. Nmap Single Client Scan")
        print(Fore.CYAN + "   Parameter: -sV -sC -p- (Versionserkennung, Skripte, alle Ports)")
        print(Fore.BLUE + "5. Nmap UDP Ports Scan auf versteckten Hosts")
        print(Fore.CYAN + "   Parameter: -sU -p 53,161 (UDP-Ports für DNS und SNMP)")
        print(Fore.BLUE + "6. Nmap Hidden Hosts Scan")
        print(Fore.CYAN + "   Parameter: -Pn (Scan nach Hosts mit offenen Ports ohne Ping, max. 5 Minuten)")
        print(Fore.BLUE + "7. Löschen aller Scan-Ergebnisse")
        print(Fore.RED + "8. Beenden")
        
        choice = input(Fore.CYAN + "\nWählen Sie eine Option (1/2/3/4/5/6/7): ").strip()

        if choice == "1":
            nmap_full_network_scan()
        elif choice == "2":
            nmap_scan_all_found_hosts()
        elif choice == "3":
            nmap_deep_scan_all_found_hosts()
        elif choice == "4":
            nmap_single_client_scan()
        elif choice == "5":
            nmap_udp_ports_scan_on_hidden_hosts()
        elif choice == "6":
            nmap_hidden_hosts_scan()
        elif choice == "7":
            delete_all_scan_results()
        elif choice == "8":
            print(Fore.RED + "\n[+] Beende das Programm. Auf Wiedersehen!")
            break
        else:
            print(Fore.RED + "\n[-] Ungültige Eingabe. Bitte versuchen Sie es erneut.")

if __name__ == "__main__":
    display_banner()
    main_menu()
